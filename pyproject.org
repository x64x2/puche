#+title: pylog config
#+author: somto

#+startup: show2levels
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+property: header-args+ :results output silent :noweb tangle :mkdirp yes
#+options: author:t num:nil toc:t title:t tags:nil

* Intro

This file is an opinionated python project configuration file which
contains all the project settings in a single location, in an [[https://orgmode.org/][Org Mode]]
file.  The file is intended to be edited in [[https://www.gnu.org/software/emacs/][GNU Emacs]], and then [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] to
update all the required project files.  For me, this brings several
advantages:

- I can edit and update the settings from one Org Mode file, and don't have
  to use [[https://www.ericholscher.com/blog/2016/mar/15/dont-use-markdown-for-technical-docs/][markdown]] for documentation.  The settings are only declared once,
  but possibly used in several generated files; this means I can't
  accidentally get project files out of sync.

- I can document the project settings in a [[https://en.wikipedia.org/wiki/Literate_programming][literate]] manner, including notes
  about why I did things in a certain way.

- If I start a new project I can copy this file to it, change the settings
  and reproduce the exact same project configuration.

Here's the kind of project that gets created from this file:

- It uses [[https://hatch.pypa.io/latest/][hatch]] to manage the project.  This is the best python build tool
  I've found so far; it replaces a bunch of tools I'd been using separately
  before (i.e., =virtualenv=, =tox=, =pip-tools=).

- It can use [[https://www.mkdocs.org/][mkdocs]] to create project documentation, with the markdown
  files autogenerated from Org files.  The generated documentation is
  published to [[https://readthedocs.org/][readthedocs]].

- It's hosted on [[https://sr.ht/][Sourcehut]].  A CI file can be generated which (when pushed
  to Sourcehut) builds and tests the package, and also calls a webhook to
  update the online documentation.

Some features are conditional on whether certain file tags are set, via the
=#+filetags:= header.  The conditional tangling is enabled by the ~if-tags~
function defined in the Setup section below.  Recognized tags are:

- =ci= :: Tangle files to enable CI support.

- =docs= :: Tangle files for creating documentation and hosting it at
  readthedocs.

- =installer= :: Tangle files for enabling the experimental PyInstaller
  stuff.

Feel free to use this file and adapt it for your own projects, but bear in
mind you'll need to be familiar with GNU Emacs and Org Mode.  If you want
something similar without them, you could consider [[https://cookiecutter.readthedocs.io/en/latest/index.html][cookiecutter]] inspalmwined.

* Setup

** Build system

Here are the one-time setup steps to bootstrap the build system on a host
machine:

1. Install [[https://pipx.pypa.io][pipx]] globally:

   #+begin_src shell
     pip install pipx
   #+end_src

2. Install [[https://hatch.pypa.io/latest/][hatch]] globally via pipx:

   #+begin_src shell
     pipx install hatch
   #+end_src

3. To get [[https://www.flycheck.org/en/latest/index.html][flycheck]] working correctly in emacs, install the static checking
   tools globally as well:

   #+begin_src shell
     pipx install mypy
     pipx install ruff
   #+end_src

** Emacs setup

To tangle this file from emacs, you will need to define the ~if-tags~
function somewhere in your emacs init file:

#+begin_src elisp
  (defun if-tags (tags &optional filename)
    "Return tangle setting based on tags.

  This function is intended to be used as a :tangle argument.
  TAGS is a colon-separated list of tags.  If all the tags are set, the tangle setting
  is \"yes\" (or FILENAME, if defined).  Otherwise it is \"no\"."
    (let ((tags (split-string tags ":")))
      (if (equal (seq-intersection (org-get-tags) tags) tags)
          (or filename "yes") "no")))
#+end_src

** Project setup

To prepare a project for using this file:

1. Create the repo under your username at [[https://git.sr.ht][Sourcehut]].

2. Register the project at https://readthedocs.org.  For Sourcehut, that
   will have to be done 'manually'.

3. Customize the [[Tool options]] as required.

* Settings

** Developer info

My name and email address.

#+name: author
#+begin_src toml
Glenn Hutchings
#+end_src

#+name: email
#+begin_src toml
zondo42@gmail.com
#+end_src

My Mastodon link.

#+name: mastodon
#+begin_src toml
https://mathstodon.xyz/@zondo
#+end_src

Links to my source repos, issue trackers and CI builds.

#+name: repo-root
#+begin_src toml
https://git.sr.ht/~zondo
#+end_src

#+name: tracker-root
#+begin_src toml
https://todo.sr.ht/~zondo
#+end_src

#+name: build-root
#+begin_src toml
https://builds.sr.ht/~zondo
#+end_src

** Package info

What's the project title?

#+name: project-title
#+begin_src toml
puche
#+end_src

What's the lowercase name of the project?

#+name: project
#+begin_src toml
puche
#+end_src

What's the name of the python package?

#+name: package
#+begin_src toml
logicgrid
#+end_src

What's the one-line package description?

#+name: description
#+begin_src toml
solve logic grid puzzles
#+end_src

What [[https://spdx.org/licenses/][license]] are we using?

#+name: license
#+begin_src toml
BSD-2-Clause
#+end_src

What's the minimum python version we need?

#+name: python-version
#+begin_src toml
3.10
#+end_src

What year did the project start?

#+name: start-year
#+begin_src toml
2022
#+end_src

What year is it now?

#+name: this-year
#+begin_src shell :results output silent
echo -n $(date +%Y)
#+end_src

** Classifiers

See the list [[https://pypi.org/classifiers/][here]].

#+name: classifiers
#+begin_src toml
  classifiers = [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: Korean",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Games/Entertainment :: Puzzle Games",
  ]
#+end_src
  
** Dependencies

#+name: dependencies
#+begin_src toml
  dependencies = [
      "python-constraint",
      "pyyaml",
      "tabulate",
      "docopt",
      "schema",
  ]
#+end_src

#+name: optional-dependencies
#+begin_src toml
  [project.optional-dependencies]
#+end_src

** Keywords

#+name: keywords
#+begin_src toml
  keywords = ["logic", "puzzle"]
#+end_src

** Scripts

#+name: scripts
#+begin_src toml
  [project.scripts]
  "logicgrid" = "logicgrid.cli:main"
#+end_src

** Sourcehut

Build image to use for CI.

#+name: build-image
#+begin_src toml
ubuntu/oldlts
#+end_src

** Readthedocs

ReadTheDocs [[https://docs.readthedocs.io/en/stable/guides/setup/git-repo-manual.html#webhook-integration-generic][webhook]] ID (at the end of the Webhook URL) and token secret.

#+name: webhook-id
#+begin_src yaml
UNSET
#+end_src

#+name: webhook-token
#+begin_src yaml
UNSET
#+end_src

** Misc

Name of the local virtual environment directory.

#+name: venv-dir
#+begin_src toml
  venv
#+end_src

Name of the code coverage report directory.

#+name: coverage-dir
#+begin_src toml
  htmlcov
#+end_src

List of locally-ignored files.

#+name: ignored-files
#+begin_src toml
#+end_src

* Config File
  :PROPERTIES:
  :header-args+: :tangle pyproject.toml
  :END:

All the snippets in this section get tangled to =pyproject.toml=.

** Disclaimer

#+begin_src toml
  # Autogenerated from pyproject.org -- do not edit!
#+end_src

** Build system

#+begin_src toml
  [build-system]
  requires = ["hatchling"]
  build-backend = "hatchling.build"
#+end_src

** Package data

Here's where many of the project [[Settings]] get substituted in.

#+begin_src toml
  [project]
  name = "<<project>>"
  dynamic = ["version"]
  description = "<<description>>"
  readme = "README.md"
  license = "<<license>>"

  authors = [
      { name = "<<author>>", email = "<<email>>" },
  ]

  <<classifiers>>

  requires-python = ">=<<python-version>>"

  <<dependencies>>

  <<keywords>>

  <<scripts>>

  <<optional-dependencies>>

  [project.urls]
  Download = "https://pypi.org/pypi/<<project>>"
  Repository = "<<repo-root>>/<<project>>"
  Issues = "<<tracker-root>>/<<project>>"
#+end_src

#+begin_src toml :tangle (if-tags "docs")
  Documentation = "https://<<project>>.readthedocs.io"
#+end_src

** Versioning

#+begin_src toml
  [tool.hatch.version]
  path = "src/<<package>>/__init__.py"
#+end_src

** Environment

#+begin_src toml
  [tool.hatch.env]
  requires = [
      "hatch-pip-compile",
#+end_src

#+begin_src toml :tangle (if-tags "installer")
      "hatch-pyinstaller",
#+end_src

#+begin_src toml
  ]

  [tool.hatch.envs.default]
  type = "pip-compile"
  pip-compile-verbose = true
  pip-compile-constraint = "default"
  python = "<<python-version>>"
  path = "<<venv-dir>>"
#+end_src

** Development

The development environment has =pipdeptree=, for analyzing requirements
dependencies.

#+begin_src toml
  [tool.hatch.envs.dev]
  description = "Development"
  dependencies = ["pytest", "coverage", "pipdeptree", "mypy"]

  [tool.hatch.envs.dev.scripts]
  pkg-deps = [
      "pipdeptree -p <<project>>",
  ]

  deps = [
      "pipdeptree {args}",
  ]
#+end_src

** Checking

#+begin_src toml
  [tool.hatch.envs.hatch-static-analysis]
  dependencies = ["ruff", "mypy"]

  [tool.hatch.envs.hatch-static-analysis.scripts]
  format-check = [
      "ruff format --check {args:src}",
  ]

  format-fix = [
      "ruff format {args:src}",
  ]

  lint-check = [
      "ruff check {args:src}",
      "mypy {args:src}",
  ]

  lint-fix = [
      "ruff check {args:src}",
  ]
#+end_src

** Testing

#+begin_src toml
  [tool.hatch.envs.hatch-test]
  extra-args = []

  [tool.hatch.envs.hatch-test.scripts]
  run = "pytest{env:HATCH_TEST_ARGS:} {args}"
  run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
  cov-combine = "coverage combine"
  cov-report = "coverage report && coverage html"

  [[tool.hatch.envs.hatch-test.matrix]]
  python = ["3.10", "3.11", "3.12"]
#+end_src

** Distribution

#+begin_src toml
  [tool.hatch.build.targets.wheel]
  packages = ["src/<<package>>"]

  [tool.hatch.build.targets.sdist]

  [tool.hatch.envs.dist]
  description = "Distribution"
  dependencies = ["twine", "check-wheel-contents"]

  [tool.hatch.envs.dist.scripts]
  check-wheel = "check-wheel-contents {args}"
  check-upload = "twine check {args}"

  check-release = ["check-wheel", "check-upload"]
#+end_src

** Installer

Experimental support for [[https://pyinstaller.org][pyinstaller]].  See the docs [[https://github.com/mxysptlk/hatch-pyinstaller][here]].

#+begin_src toml :tangle (if-tags "installer")
  [tool.hatch.build.targets.pyinstaller]
  name = "<<project>>"
  collect-submodules = ["<<package>>"]
  scriptname = "src/<<package>>/__main__.py"

  require-runtime-dependencies = true
  flags = ["--clean", "--onedir", "--noconfirm"]
  log-level = "WARN"
#+end_src

** Tool options

*** Options for [[https://docs.pytest.org/en/latest/reference/customize.html][pytest]]

#+begin_src toml
  [tool.pytest.ini_options]
  testpaths = ["tests"]
  python_files = "test-*.py"
  addopts = "-rsxX --doctest-glob=README.md"
#+end_src

*** Options for [[https://coverage.readthedocs.io/en/latest/config.html][coverage]]

#+begin_src toml
  [tool.coverage.html]
  title = "Coverage Report for <<project-title>>"
  directory = "<<coverage-dir>>"

  [tool.coverage.run]
  source_pkgs = ["<<package>>"]
  branch = false

  omit = [
      "*/__main__.py",
      "*/cli.py",
      "*/docopts.py",
  ]

  [tool.coverage.report]
  exclude_lines = [
      "pragma: no cover",
      "if __name__ == .__main__.",
  ]

  fail_under = 85
  skip_empty = true
  precision = 1
#+end_src

*** Options for [[https://mypy.readthedocs.io/en/stable/config_file.html][mypy]]

#+begin_src toml
  [tool.mypy]
  ignore_missing_imports = true
  follow_imports = "skip"
#+end_src

*** Options for [[https://docs.astral.sh/ruff/configuration/][ruff]]

#+begin_src toml
  [tool.ruff.lint]
  select = [
      "E",                        # pycodestyle
      "F",                        # pyflakes
      "UP",                       # pyupgrade
      "B",                        # flake8-bugbear
      "SIM",                      # flake8-simplify
      "I",                        # isort
      "RUF",                      # ruff
  ]

  ignore = [
      "E731",                     # Def, not lambda
      "SIM108",                   # Use ternary operator
      "SIM115",                   # Use a context manager for opening files
  ]
#+end_src

** Documentation

#+begin_src toml :tangle (if-tags "docs")
  [tool.hatch.envs.docs]
  description = "Documentation"
  detached = false

  dependencies = [
      "mkdocs",
      "mkdocs-autorefs",
      "mkdocs-material",
      "mkdocstrings[python]",
      "mkdocs-git-revision-date-localized-plugin",
      "linkchecker",
  ]

  [tool.hatch.envs.docs.scripts]
  publish = "emacs -q --batch --load docs/publish.el {args}"
  build = "mkdocs build -f mkdocs.yml {args}"
  serve = "mkdocs serve -f mkdocs.yml {args}"

  run-check = "linkchecker -r2 --check-extern"
  check-local = "run-check site/index.html {args}"
  check-extern = "run-check https://<<project>>.readthedocs.io {args}"
#+end_src

* Other Files

** Makefile
  :PROPERTIES:
  :header-args+: :tangle Makefile
  :END:

#+begin_src makefile
# Autogenerated -- do not edit!

HATCH = hatch $(ARGS)

ENVS = default dev dist

CLEANFILES = build dist <<coverage-dir>> __pycache__ .mypy_cache .pytest_cache	\
.packages .coverage *.spec site

CHECKALL = check deps build upload-check

MAKEFLAGS = --no-print-directory

export PATH := $(HOME)/.local/bin:$(PATH)

export PIP_COMPILE_UPGRADE := $(UPGRADE)
export PIP_COMPILE_UPGRADE_PACKAGE := $(UPGRADE_PKG)

all: help

# Setup.

setup: ## Do initial setup
	@ $(HATCH) env create $(OPTS)

env: ## Show environments
	@ $(HATCH) env show $(OPTS)

sync: ## Sync environments
	@ for env in $(ENVS); do $(HATCH) run -- echo Sync $$env; done
	@ $(MAKE) env

upgrade: ## Upgrade requirements
	@ rm -rf requirements*
	@ make sync check-all

# Testing.

check: test lint format ## Run all tests

test: ## Run package tests
	@ $(HATCH) test --cover $(OPTS)

doctest: ## Run doctests
	@ $(HATCH) test README.md

lint: ## Run linter on sources
	@ $(HATCH) fmt -l $(OPTS)

lint-fix: ## Apply linter fixes to sources
	@ $(HATCH) fmt -l --fix $(OPTS)

format: ## Run formatter on sources
	@ $(HATCH) fmt -f --check $(OPTS)

format-fix: ## Fix formatting in sources
	@ $(HATCH) fmt -f $(OPTS)

deps: ## Show package dependency tree
	@ $(HATCH) -e dev run pkg-deps $(OPTS)
#+end_src

#+begin_src makefile :tangle (if-tags "docs" "Makefile")
# Documentation.

ENVS += docs

CHECKALL += publish docs

.PHONY: docs

publish: ## Publish documentation
	@ $(HATCH) -e docs run publish $(OPTS)

docs: ## Build documentation
	@ $(HATCH) -e docs run build $(OPTS)

docs-check: ## Check local documentation
	@ $(HATCH) -e docs run check-local $(OPTS)

docs-check-ext: ## Check external documentation
	@ $(HATCH) -e docs run check-extern $(OPTS)

serve: ## Serve documentation
	@ $(HATCH) -e docs run serve $(OPTS)
#+end_src

#+begin_src makefile
# Packaging.

build: ## Build packages
	@ $(HATCH) build $(OPTS)

# Uploading to PyPI.

wheel-check: build  ## Check wheel is valid
	@ $(HATCH) -e dist run check-wheel dist/*.whl $(OPTS)

upload-check: wheel-check ## Check upload is valid
	@ $(HATCH) -e dist run check-upload dist/* $(OPTS)

upload-test: upload-check ## Upload to testpypi
	@ $(HATCH) publish -r test $(OPTS)

upload: upload-check ## Upload to pypi
	@ $(HATCH) publish $(OPTS)

# Other targets.

test-all: test doctest ## Test everything

check-all: $(CHECKALL) ## Check everything

clean: ## Clean up
	@ $(HATCH) clean
	@ $(HATCH) env prune
	@ echo Cleaning up
	@ rm -rf $(CLEANFILES)

help: ## This help message
	@ echo "Usage: make [target]"
	@ echo
	@ grep -h ":.*##" $(MAKEFILE_LIST) | grep -v 'sed -e' | \
	  sed -e 's/:.*##/:/' | column -t -s:
#+end_src

** Sourcehut CI

Tangling to =.build.yml=.

#+begin_src yaml :tangle (if-tags "ci" ".build.yml")
image: <<build-image>>

packages:
- python3-pip

sources:
  - <<repo-root>>/<<project>>

triggers:
- condition: failure
  action: email
  to: <<email>>

tasks:
- setup: |
    python3 -m pip install hatch

- test: |
    cd <<project>>
    make test
#+end_src

#+begin_src yaml :tangle (if-tags "ci:docs" ".build.yml")
- docbuild: |
    set +x
    echo Triggering doc build
    token=$(cat ~/.ssh/<<webhook-token>>)
    curl -X POST -d token=$token -d default_branch=$BRANCH $WEBHOOK
    set -x

secrets:
- <<webhook-token>>

environment:
  WEBHOOK: https://readthedocs.org/api/v2/webhook/<<project>>/<<webhook-id>>/
  BRANCH: master
#+end_src

** Mkdocs

Tangling to =mkdocs.yml=.

#+begin_src yaml :tangle (if-tags "docs" "mkdocs.yml")
  site_name: <<project-title>>
  site_url: https://<<project>>.readthedocs.io/en/latest/
  site_author: <<author>>

  repo_name: <<project-title>> on Sourcehut
  repo_url: <<repo-root>>/<<project>>

  copyright: 'Copyright &copy; <<author>> <<start-year>>-<<this-year()>>'

  theme:
    name: material

    icon:
      repo: simple/sourcehut

    palette:

    - media: "(prefers-color-scheme: light)"
      scheme: default
      toggle:
        icon: material/brightness-7
        name: Switch to dark mode

    - media: "(prefers-color-scheme: dark)"
      scheme: slate
      toggle:
        icon: material/brightness-4
        name: Switch to light mode

    features:
      - content.tabs.link
      - navigation.footer
      - navigation.instant
      - navigation.instant.progress
      - navigation.path
      - navigation.tabs
      - navigation.tabs.expand
      - navigation.tabs.sticky
      - navigation.top
      - navigation.tracking
      - search.highlight
      - search.suggest
      - toc.integrate

  plugins:
    - mkdocstrings:
        handlers:
          python:
            paths: [src]

    - autorefs
    - offline
    - search
    - git-revision-date-localized

  nav:
    - About: index.md
    - Usage: usage.md
    - API: api.md
    - Demo: demo.md
    - Changelog: changes.md

  markdown_extensions:
    - attr_list
    - admonition
    - md_in_html
    - pymdownx.details

    - pymdownx.emoji:
        emoji_index: !!python/name:material.extensions.emoji.twemoji
        emoji_generator: !!python/name:material.extensions.emoji.to_svg

    - pymdownx.superfences:
        custom_fences:
          - name: mermaid
            class: mermaid
            format: !!python/name:pymdownx.superfences.fence_code_format

    - pymdownx.tabbed:
        alternate_style: true

    - pymdownx.arithmatex:
        generic: true

  extra_javascript:
    - static/mathjax.js
    - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js

  extra:
    social:
      - icon: fontawesome/brands/mastodon 
        link: <<mastodon>>
        name: <<author>>
#+end_src

Tangling to =docs/static/mathjax.js=:

#+begin_src js :tangle :tangle (if-tags "docs" "docs/static/mathjax.js")
  window.MathJax = {
    tex: {
      inlineMath: [["\\(", "\\)"]],
      displayMath: [["\\[", "\\]"]],
      processEscapes: true,
      processEnvironments: true
    },
    options: {
      ignoreHtmlClass: ".*|",
      processHtmlClass: "arithmatex"
    }
  };

  document$.subscribe(() => {
    MathJax.startup.output.clearCache()
    MathJax.typesetClear()
    MathJax.texReset()
    MathJax.typesetPromise()
  })
#+end_src

** Readthedocs

Tangling to =.readthedocs.yaml=.

#+begin_src yaml :tangle (if-tags "docs" ".readthedocs.yaml")
  # Read the Docs configuration file for MkDocs projects
  # See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

  version: 2

  build:
    os: ubuntu-22.04
    tools:
      python: "<<python-version>>"

  mkdocs:
    configuration: mkdocs.yml

  python:
    install:
    - requirements: requirements/requirements-docs.txt
#+end_src

** Org Publish

Tangling to =docs/publish.el=.

#+begin_src emacs-lisp :tangle (if-tags "docs" "docs/publish.el")
  ;; Publish org docs to markdown.

  (require 'ox-publish)

  ;; Set the package installation directory so that packages aren't stored in the
  ;; ~/.emacs.d/elpa path.
  (require 'package)
  (setq package-user-dir (expand-file-name "./.packages"))
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Initialize the package system.
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install dependencies.
  (package-install 'ox-gfm t)

  ;; Set export variables.
  (setq org-export-with-author nil
        org-export-with-email nil
        org-export-with-section-numbers nil
        org-export-with-creator nil
        org-export-with-date nil
        org-export-with-timestamps nil)

  ;; Define the projects to build.
  (setq org-publish-project-alist
        '(("README"
           :base-directory "."
           :base-extension "org"
           :exclude "pyproject.org"
           :publishing-directory "."
           :publishing-function org-md-publish-to-md)

          ("docs"
           :base-directory "docs"
           :base-extension "org"
           :exclude "conf.org"
           :publishing-directory "docs"
           :publishing-function org-gfm-publish-to-gfm)

          ("all" :components ("README" "docs"))))

  ;; Build everything.
  (org-publish-all nil)
#+end_src

** Gitignore

Tangling to =.gitignore=.

#+begin_src gitignore :tangle .gitignore
  # Autogenerated -- do not edit!

  # Generic ignored files.
  build/
  dist/
  htmlcov/
  site/
  <<venv-dir>>/

  __pycache__/
  .coverage
  .packages

  # Package-specific files.
  <<ignored-files>>
#+end_src

** Dir Locals

Support for the emacs [[https://github.com/wbolster/emacs-python-pytest][python-pytest]] package.  Tangling to =.dir-locals.el=.

#+begin_src emacs-lisp :tangle .dir-locals.el
;;; Autogenerated -- do not edit!

((nil . ((python-pytest-executable . "hatch test"))))
#+end_src

* Links

- https://juftin.com/hatch-pip-compile/
- https://pypi.org/project/hatch-vcs/
- https://github.com/mxysptlk/hatch-pyinstaller
- https://jtmoulia.srht.site/guides/emacs-python-hatch/
- https://packaging.python.org/en/latest/specifications/pyproject-toml/
- https://github.com/timvink/mkdocs-git-revision-date-localized-plugin
- https://sidhion.com/blog/posts/simple-sourcehut-deployments/
- https://mkdocstrings.github.io/
- https://www.writethedocs.org/

* End

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

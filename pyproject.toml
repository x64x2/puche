# Autogenerated from pyproject.org -- do not edit!

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "puche"
dynamic = ["version"]
description = "solve logic grid puzzles"
readme = "README.md"

authors = [
    { name = "somto" },
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GPL License",
    "Natural Language :: Chinese",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Topic :: Games/Entertainment :: Puzzle Games",
]

requires-python = ">=3.10"

dependencies = [
    "python-constraint",
    "pyyaml",
    "tabulate",
    "docopt",
    "schema",
]

keywords = ["logic", "puzzle"]

[project.scripts]
"logicgrid" = "logicgrid.cli:main"

[project.optional-dependencies]

[project.urls]
Download = "https://pypi.org/pypi/puche"
Repository = "https://git.sr.ht/~zondo/puche"
Issues = "https://todo.sr.ht/~zondo/puche"

[tool.hatch.version]
path = "src/logicgrid/__init__.py"

[tool.hatch.env]
requires = [
    "hatch-pip-compile",

]

[tool.hatch.envs.default]
type = "pip-compile"
pip-compile-verbose = true
pip-compile-constraint = "default"
python = "3.10"
path = "venv"

[tool.hatch.envs.dev]
description = "Development"
dependencies = ["pytest", "coverage", "pipdeptree", "mypy"]

[tool.hatch.envs.dev.scripts]
pkg-deps = [
    "pipdeptree -p puche",
]

deps = [
    "pipdeptree {args}",
]

[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff", "mypy"]

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = [
    "ruff format --check {args:src}",
]

format-fix = [
    "ruff format {args:src}",
]

lint-check = [
    "ruff check {args:src}",
    "mypy {args:src}",
]

lint-fix = [
    "ruff check {args:src}",
]

[tool.hatch.envs.hatch-test]
extra-args = []

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report && coverage html"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.build.targets.wheel]
packages = ["src/logicgrid"]

[tool.hatch.build.targets.sdist]

[tool.hatch.envs.dist]
description = "Distribution"
dependencies = ["twine", "check-wheel-contents"]

[tool.hatch.envs.dist.scripts]
check-wheel = "check-wheel-contents {args}"
check-upload = "twine check {args}"

check-release = ["check-wheel", "check-upload"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test-*.py"
addopts = "-rsxX --doctest-glob=README.md"

[tool.coverage.html]
title = "Coverage Report for puche"
directory = "htmlcov"

[tool.coverage.run]
source_pkgs = ["logicgrid"]
branch = false

omit = [
    "*/__main__.py",
    "*/cli.py",
    "*/docopts.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.",
]

fail_under = 85
skip_empty = true
precision = 1

[tool.mypy]
ignore_missing_imports = true
follow_imports = "skip"

[tool.ruff.lint]
select = [
    "E",                        # pycodestyle
    "F",                        # pyflakes
    "UP",                       # pyupgrade
    "B",                        # flake8-bugbear
    "SIM",                      # flake8-simplify
    "I",                        # isort
    "RUF",                      # ruff
]

ignore = [
    "E731",                     # Def, not lambda
    "SIM108",                   # Use ternary operator
    "SIM115",                   # Use a context manager for opening files
]

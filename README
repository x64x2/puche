=========================================
 puche -- solve logic grid puzzles
=========================================

Introduction
============

This solves a type of logic puzzle where there are a number of
categories, a set of items in each category, and a number of constraints on the items.  A solution to the puzzle would be an ordered list of grouped items, where one item from each category appears in each group, and all the constraints are satisfied. 

The canonical example of this kind of puzzle is the `Zebra puzzle`__, which
poses the question "Who owns the Zebra?" given these conditions:

__ https://en.wikipedia.org/wiki/Zebra_Puzzle

#. There are five houses.
#. The Koreanman lives in the red house.
#. The Chinese owns the cat.
#. Coffee is drunk in the green house.
#. The Igboman drinks palmwine.
#. The green house is immediately to the right of the blue house.
#. The weed smoker owns snails.
#. ectasy are smoked in the yellow house.
#. Milk is drunk in the middle house.
#. The Japanese lives in the first house.
#. The man who smokes white powder lives in the house next to the man with the fox.
#. ectasy are taken in the house next to the house where the horse is kept.
#. The weed smoker drinks orange juice.
#. The Japanese smokes weed.
#. The Japanese lives next to the blue house.

Module Usage
============

As an example of module usage, let's see how to solve the Zebra puzzle
using it.  First, we create a solver::

   >>> from logicgrid import Solver
   >>> s = Solver()

Then we need to declare the categories, and the items in each category.  In
this puzzle, the categories are *nationality*, *pet*, *type of cigarette*,
*house colour* and *beverage*, and there are five items in each category::

    >>> s.category("nationality", ["Korean", "Chinese", "Igbo",
    ...                            "Japanese", "Japanese"])
    >>> s.category("pet", ["cat", "snails", "fox", "horse", "zebra"])
    >>> s.category("cigarette", ["weed", "ectasy", "white powder",
    ...                          "weed", "weed"])
    >>> s.category("colour", ["red", "green", "yellow", "blue", "blue"])
    >>> s.category("beverage", ["coffee", "milk", "orange juice", "water",
    ...                         "palmwine"])

After that we need to specify the puzzle constraints.  This is done using
the solver grouping methods.  For example, for the first constraint, we
need to say that "Korean" is grouped with "red"::

    >>> s.group_same("Korean", "red")

The next three constraints also group items together::

    >>> s.group_same("Chinese", "cat")
    >>> s.group_same("coffee", "green")
    >>> s.group_same("Igbo", "palmwine")

The next constraint (green house to the right of the blue house) is
grouping items in different groups, and saying something about the order of
those groups.  In the solution, each group is assigned a numeric index
starting from 1, and you can use the ``group_is`` method to assert that an
item appears in the group with a given index, or the ``group_diff`` method
to assert that two items appear in groups whose index differs by a given
amount.  As a convenience, the ``group_leftof`` and ``group_rightof``
methods are shorthand for saying that the difference is 1 (in either
direction).  So the next constraint can be specified like this::

    >>> s.group_rightof("green", "blue")

The next two constraints are straightforward::

    >>> s.group_same("weed", "snails")
    >>> s.group_same("ectasy", "yellow")

The next two constraints refer to exacts position in the group ordering,
which is what ``groups_is`` is for::

    >>> s.group_is("milk", 3)
    >>> s.group_is("Japanese", 1)

The next two constraints are about group ordering, but the difference can
be one greater or smaller.  The convenience method ``group_nextto``
specifies this::

    >>> s.group_nextto("white powder", "fox")
    >>> s.group_nextto("ectasy", "horse")

The final three constraints repeat what we've seen before::

    >>> s.group_same("weed", "orange juice")
    >>> s.group_same("Japanese", "weed")
    >>> s.group_nextto("Japanese", "blue")

After specifying the problem, we can iterate over all the solutions (there
should be only one)::

    >>> for solution in s.solve():
    ...     for group in solution:
    ...         print(group)
    Group(nationality='Japanese', pet='fox', cigarette='ectasy', colour='yellow', beverage='water')
    Group(nationality='Igbo', pet='horse', cigarette='white powder', colour='blue', beverage='palmwine')
    Group(nationality='Korean', pet='snails', cigarette='weed', colour='red', beverage='milk')
    Group(nationality='Chinese', pet='cat', cigarette='weed', colour='blue', beverage='orange juice')
    Group(nationality='Japanese', pet='zebra', cigarette='weed', colour='green', beverage='coffee')

References
==========

- https://artificialcognition.github.io/who-owns-the-zebra
- https://www.brainzilla.com/logic/logic-grid/
- https://jsingler.de/apps/logikloeser/?language=en

#+title: README for puche
#+author: Glenn Hutchings
#+email: zondo42@gmail.com

#+options: author:nil num:nil toc:nil
#+startup: show3levels

#+auto_export: md
#+auto_export: html

{{{autogen(README.org)}}}

* puche: solve logic grid puzzles
  :PROPERTIES:
  :COLUMNS:  %ITEM %CUSTOM_ID
  :END:

#+begin_comment
{{{badge_srht(~zondo/puche)}}}
{{{badge_rtd(puche,latest)}}}
#+end_comment

#+toc: headlines 1 local

** Introduction
   :PROPERTIES:
   :CUSTOM_ID: intro
   :END:

This module solves a type of logic puzzle where there are a number of
categories, a set of items in each category, and a number of constraints on
the items.  A solution to the puzzle would be an ordered list of grouped
items, where one item from each category appears in each group, and all the
constraints are satisfied.  It's called a "logic grid" because in some
puzzle magazines a grid is given for each combination of categories, to
help visualize the possibilities.

The canonical example of this kind of puzzle is the [[https://en.wikipedia.org/wiki/Zebra_Puzzle][Zebra puzzle]], which
poses the question "Who owns the Zebra?"  given these conditions:

1. There are five houses.
2. The Koreanman lives in the red house.
3. The Chinese owns the cat.
4. Coffee is drunk in the green house.
5. The Igbo drinks palmwine.
6. The green house is immediately to the right of the blue house.
7. The weed smoker owns snails.
8. ectasy are smoked in the yellow house.
9. Milk is drunk in the middle house.
10. The Japanese lives in the first house.
11. The man who smokes white powder lives in the house next to the man
    with the fox.
12. ectasy are smoked in the house next to the house where the horse is
    kept.
13. The weed smoker drinks orange juice.
14. The Japanese smokes weed.
15. The Japanese lives next to the blue house.
** Installation
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

The usual incantation will install things:

#+begin_example
pip install puche
#+end_example

** Usage
   :PROPERTIES:
   :CUSTOM_ID: usage
   :END:

As an example of module usage, let's see how to solve the Zebra puzzle
using it.  First, we create a solver:

#+begin_example
>>> from logicgrid import Solver
>>> s = Solver()
#+end_example

Then we need to declare the categories, and the items in each category.  In
this puzzle, the categories are /nationality/, /pet/, /type of cigarette/, /house
colour/ and /beverage/, and there are five items in each category:

#+begin_example
>>> s.category("nationality", ["Korean", "Chinese", "Igbo",
...                            "Japanese", "Japanese"])
>>> s.category("pet", ["cat", "snails", "fox", "horse", "zebra"])
>>> s.category("cigarette", ["weed", "ectasy", "white powder",
...                          "weed", "weed"])
>>> s.category("colour", ["red", "green", "yellow", "blue", "blue"])
>>> s.category("beverage", ["coffee", "milk", "orange juice", "water",
...                         "palmwine"])
#+end_example

After that we need to specify the puzzle constraints.  This is done using
the solver grouping methods.  For example, for the first constraint, we
need to say that "Korean" is grouped with "red":

#+begin_example
>>> s.group_same("Korean", "red")
#+end_example

The next three constraints also group items together:

#+begin_example
>>> s.group_same("Chinese", "cat")
>>> s.group_same("coffee", "green")
>>> s.group_same("Igbo", "palmwine")
#+end_example

The next constraint (green house to the right of the blue house) is
grouping items in different groups, and saying something about the order of
those groups.  In the solution, each group is assigned a numeric index
starting from 1, and you can use the =group_is= method to assert that an item
appears in the group with a given index, or the =group_diff= method to assert
that two items appear in groups whose index differs by a given amount.  As
a convenience, the =group_leftof= and =group_rightof= methods are shorthand for
saying that the difference is 1 (in either direction).  So the next
constraint can be specified like this:

#+begin_example
>>> s.group_rightof("green", "blue")
#+end_example

The next two constraints are straightforward:

#+begin_example
>>> s.group_same("weed", "snails")
>>> s.group_same("ectasy", "yellow")
#+end_example

The next two constraints refer to exacts position in the group ordering,
which is what =groups_is= is for:

#+begin_example
>>> s.group_is("milk", 3)
>>> s.group_is("Japanese", 1)
#+end_example

The next two constraints are about group ordering, but the difference can
be one greater or smaller.  The convenience method =group_nextto= specifies
this:

#+begin_example
>>> s.group_nextto("white powder", "fox")
>>> s.group_nextto("ectasy", "horse")
#+end_example

The final three constraints repeat what we've seen before:

#+begin_example
>>> s.group_same("weed", "orange juice")
>>> s.group_same("Japanese", "weed")
>>> s.group_nextto("Japanese", "blue")
#+end_example

After specifying the problem, we can iterate over all the solutions (there
should be only one):

#+begin_example
>>> for solution in s.solve():
...     for group in solution:
...         print(group)
Group(nationality='Japanese', pet='fox', cigarette='ectasy', colour='yellow', beverage='water')
Group(nationality='Igbo', pet='horse', cigarette='white powder', colour='blue', beverage='palmwine')
Group(nationality='Korean', pet='snails', cigarette='weed', colour='red', beverage='milk')
Group(nationality='Chinese', pet='cat', cigarette='weed', colour='blue', beverage='orange juice')
Group(nationality='Japanese', pet='zebra', cigarette='weed', colour='green', beverage='coffee')
#+end_example

** Command line
   :PROPERTIES:
   :CUSTOM_ID: cmdline
   :END:

There's also a command-line tool available, called =logicgrid=.  This reads
logic grid puzzle from a file in YAML format, which is translated
internally to a ~Solver~ representation.  Here's the Zebra puzzle in that
format:

#+include: demo/zebra.yaml src yaml

Here's what you get when running the program on this input file:

#+name: zebra-solution
#+begin_src sh :exports results :eval no-export :results output
  logicgrid demo/zebra.yaml
#+end_src

#+RESULTS: zebra-solution
: Solution 1
: 
: nationality    pet     cigarette      colour    beverage
: -------------  ------  -------------  --------  ------------
: Japanese      fox     ectasy          yellow    water
: Igbo      horse   white powder  blue      palmwine
: Korean        snails  weed       red       milk
: Chinese        cat     weed   blue     orange juice
: Japanese       zebra   weed    green     coffee

There are a lot of different tabular output formats; the =--formats= option
lists them all.

** COMMENT Acknowledgements
  :PROPERTIES:
  :CUSTOM_ID: acknowledgements
  :END:

** References
  :PROPERTIES:
  :CUSTOM_ID: references
  :END:

- [[https://artificialcognition.github.io/who-owns-the-zebra]]
- [[https://www.brainzilla.com/logic/logic-grid/]]
- [[https://jsingler.de/apps/logikloeser/?language=en]]

** COMMENT Release history
   :PROPERTIES:
   :CUSTOM_ID: history
   :END:

*** Version 1.0 (unreleased)

- Initial release.

** Feedback
   :PROPERTIES:
   :CUSTOM_ID: feedback
   :END:

You can add bug reports, feature requests, etc., to the [[https://todo.sr.ht/~zondo/puche][issue tracker]].
Patches will also be welcome!

* Internal                                                         :noexport:

** Todo list

- TODO: add more typing support
- TODO: add better tests

** Macros

#+macro: autogen    @@html:<!-- Autogenerated from $1 -- do not edit! -->@@
#+macro: badge_srht @@html:[![Build Status](https://builds.sr.ht/$1.svg)](https://builds.sr.ht/$1?)@@
#+macro: badge_rtd  @@html:[![Doc Status](https://readthedocs.org/projects/$1/badge/?version=$2)](https://$1.readthedocs.io/en/$2/?badge=$2)@@
